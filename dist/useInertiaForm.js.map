{"version":3,"file":"useInertiaForm.js","sources":["../src/utils.ts","../src/Form/FormMetaWrapper.tsx","../src/useInertiaForm.ts","../src/Form/FormProvider.ts","../src/Form/index.tsx","../src/NestedFields.tsx","../src/useInertiaInput/inputStrategy.ts","../src/useInertiaInput/index.ts","../src/useDynamicInputs.ts","../src/Inputs/DynamicInputs.tsx","../src/Inputs/Input.tsx","../src/Inputs/Submit.tsx"],"sourcesContent":["import React from 'react'\nimport { isPlainObject, unset, get, set, isEmpty } from 'lodash'\nimport { type NestedObject } from './useInertiaForm'\n\nexport const createContext = <CT extends unknown | null>() => {\n\tconst context = React.createContext<CT | undefined>(null)\n\n\tconst useContext = <T extends CT = CT>() => {\n\t\tconst c = React.useContext<T>(\n\t\t\t(context as unknown) as React.Context<T>,\n\t\t)\n\t\tif(c === null) {\n\t\t\tthrow new Error('useContext must be inside a Provider with a value')\n\t\t}\n\t\treturn c\n\t}\n\n\treturn [useContext, context.Provider] as const\n}\n\ntype TArrType = string|number|NestedObject\nexport const unsetCompact = (data: NestedObject, path: string) => {\n\tunset(data, path)\n\n\tlet position = path.indexOf('[')\n\twhile(position >= 0) {\n\t\tconst arrPath = path.slice(0, position)\n\t\t// @ts-ignore - No way to tell TS that this will be an array\n\t\tconst arr = get(data, arrPath) as TArrType[]\n\t\tset(data, arrPath, arr.filter(a => a))\n\n\t\tposition = path.indexOf('[', position + 1)\n\t}\n}\n\nexport const fillEmptyValues = <TForm>(data: TForm) => {\n\tconst clone = structuredClone(data)\n\n\tfor(const key in clone) {\n\t\tif(isPlainObject(clone[key])) {\n\t\t\t// @ts-ignore\n\t\t\tclone[key] = fillEmptyValues(clone[key])\n\t\t} else if(Array.isArray(clone[key])) {\n\t\t\t// @ts-ignore\n\t\t\tclone[key] = clone[key].map(el => fillEmptyValues(el))\n\t\t} else if(clone[key] === undefined || clone[key] === null) {\n\t\t\t// @ts-ignore\n\t\t\tclone[key] = ''\n\t\t}\n\t}\n\n\treturn clone\n}\n\n/**\n * Appends a string to the end of parts of a dot notated string,\n *   excepting those with array notation, and the first and last elements\n */\nexport const renameWithAttributes = (str: string, append = '_attributes') => {\n\tconst parts = str.split('.')\n\n\tif(parts.length < 2) return str\n\n\tfor(let i = parts.length - 2; i > 0; i--) {\n\t\tif(parts[i].charAt(parts[i].length - 1) !== ']') {\n\t\t\tparts[i] = `${parts[i]}${append}`\n\t\t} else {\n\t\t\tparts[i].replace('[', '_attributes[')\n\t\t}\n\t}\n\n\treturn parts.join('.')\n}\n\n/**\n * Removes appended string '_attributes' from dot notation\n */\nexport const stripAttributes = (str: string, attribute = '_attributes') => {\n\treturn str.replace(new RegExp(`${attribute}\\\\.`), '.')\n}\n\nexport const renameObjectWithAttributes = <T>(data: T, str = '_attributes') => {\n\tconst clone = structuredClone(data)\n\n\t// Start at one level deep\n\tObject.values(clone).forEach(value => {\n\t\tif(isPlainObject(value)){\n\t\t\trecursiveAppendString(value, str)\n\t\t}\n\t})\n\treturn clone\n}\n\nconst recursiveAppendString = (data: NestedObject, str) => {\n\tObject.entries(data).forEach(([key, value]) => {\n\t\tif(isPlainObject(value)) {\n\t\t\trenameKey(data, key, `${key}${str}`)\n\t\t\t// @ts-ignore - Can't figure out how to type arbitrarily deep nested objects\n\t\t\trecursiveAppendString(value, str)\n\t\t} else if(Array.isArray(value)) {\n\t\t\trenameKey(data, key, `${key}${str}`)\n\t\t}\n\t})\n}\n\nconst renameKey = (obj, oldKey, newKey) => {\n\tif(oldKey !== newKey) {\n\t\tobj[newKey] = obj[oldKey]\n\t\tdelete obj[oldKey]\n\t}\n}\n\nexport const coerceArray = (arg: string | string[]) => {\n\tif(Array.isArray(arg)) return arg\n\treturn [arg]\n}\n\n/**\n * Returns whether a value should be considered empty in the context of a form input\n */\nexport const isUnset = (v: any) => {\n\tif(typeof v === 'string') {\n\t\treturn v === ''\n\t}\n\n\tif(typeof v === 'number') {\n\t\treturn v === 0 ? false : !Boolean(v)\n\t}\n\n\treturn isEmpty(v)\n}\n\n// Copied from https://gist.github.com/balthild/1f23725059aef8b9231d6c346494b918\n// which was copied from https://twitter.com/diegohaz/status/1309489079378219009\ntype PathImpl<T, K extends keyof T> =\n\tK extends string\n\t\t? T[K] extends Record<string, any>\n\t\t\t? T[K] extends ArrayLike<any>\n\t\t\t\t? K | `${K}.${PathImpl<T[K], Exclude<keyof T[K], keyof any[]>>}`\n\t\t\t\t: K | `${K}.${PathImpl<T[K], keyof T[K]>}`\n\t\t\t: K\n\t\t: never\n\nexport type Path<T> = PathImpl<T, keyof T> | Extract<keyof T, string>\n\nexport type PathValue<T, P extends Path<Required<T>>> =\n\tP extends `${infer K}.${infer Rest}`\n\t\t? K extends keyof Required<T>\n\t\t\t? Rest extends Path<Required<T>[K]>\n\t\t\t\t? PathValue<Required<T>[K], Rest>\n\t\t\t\t: never\n\t\t\t: never\n\t\t: P extends keyof Required<T>\n\t\t\t? Required<T>[P]\n\t\t\t: never\n","import React, { useReducer } from 'react'\nimport { createContext } from '../utils'\n\n/**\n * Form Meta Context\n */\nexport type FormMetaValue = {\n\tnestedAttributes: Set<string>\n\taddAttribute: (attribute: string) => void\n\tmodel?: string\n\trailsAttributes: boolean\n}\n\nconst [useFormMeta, FormMetaProvider] = createContext<FormMetaValue>()\nexport { useFormMeta }\n\nconst attributesReducer = (state: Set<string>, attribute: string) => {\n\tconst newState = new Set(state)\n\tnewState.add(attribute)\n\treturn newState\n}\n\n/**\n * Form Meta Wrapper Component\n */\ninterface FormMetaWrapperProps {\n\tchildren: React.ReactNode\n\tmodel?: string\n\trailsAttributes: boolean\n}\n\nconst FormMetaWrapper = ({ children, model, railsAttributes }: FormMetaWrapperProps) => {\n\tconst [nestedAttributes, addAttribute] = useReducer(attributesReducer, new Set<string>())\n\tconst metaValues: FormMetaValue = {\n\t\tnestedAttributes,\n\t\taddAttribute,\n\t\tmodel,\n\t\trailsAttributes,\n\t}\n\n\treturn (\n\t\t<FormMetaProvider value={ metaValues }>\n\t\t\t{ children }\n\t\t</FormMetaProvider>\n\t)\n}\n\nexport default FormMetaWrapper\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { Method, Progress, VisitOptions, type RequestPayload } from '@inertiajs/core'\nimport { router } from '@inertiajs/react'\nimport { get, isEqual, set } from 'lodash'\nimport { useRemember } from '@inertiajs/react'\nimport { useFormMeta } from './Form/FormMetaWrapper'\nimport {\n\tcoerceArray,\n\tfillEmptyValues,\n\trenameObjectWithAttributes,\n\tunsetCompact,\n\ttype Path,\n\ttype PathValue,\n} from './utils'\n\ntype OnChangeCallback = (key: string|undefined, value: unknown, prev: unknown) => void\n\nexport type Primitive = string|number|null|undefined\n\nexport type NestedObject = {\n\t[key: string]: unknown|NestedObject|NestedObject[]\n};\n\ntype setDataByPath<TForm> = <P extends Path<TForm>>(key: P, value: PathValue<TForm, P>) => void;\ntype setDataByString = (key: string, value: unknown) => void;\ntype setDataByObject<TForm> = (data: TForm) => void\ntype setDataByMethod<TForm> = (data: (previousData: TForm) => TForm) => void\n\ntype getDataByPath<TForm> = <P extends Path<TForm>>(key: P) => PathValue<TForm, P>\ntype getDataByString = (key: string) => unknown\n\ntype unsetDataByPath<TForm> = (key: Path<TForm>) => void\ntype unsetDataByString = (key: string) => void\n\ntype resetAll = () => void\ntype resetByPath<TForm> = (field: Path<TForm>|Path<TForm>[]) => void\ntype resetByString = (field: string|string[]) => void\n\ntype setErrorByPath<TForm> = (field: Path<TForm>, value: string|string[]) => void\ntype setErrorByString = (field: string, value: string|string[]) => void\ntype setErrorByObject = (errors: Record<string, string|string[]>) => void\n\ntype getErrorByPath<TForm> = (field: Path<TForm>) => string|string[]|undefined\ntype getErrorByString = (field: string) => string|string[]|undefined\n\ntype clearAllErrors = () => void\ntype clearErrorsByPath<TForm> = (field: Path<TForm>|Path<TForm>[]) => void\ntype clearErrorsByString = (field: string|string[]) => void\n\nexport interface UseInertiaFormProps<TForm> {\n\tdata: TForm\n\tisDirty: boolean\n\terrors: Partial<Record<keyof TForm, string|string[]>>\n\thasErrors: boolean\n\tprocessing: boolean\n\tprogress: Progress|null\n\twasSuccessful: boolean\n\trecentlySuccessful: boolean\n\tsetData: setDataByObject<TForm> & setDataByMethod<TForm> & setDataByPath<TForm> & setDataByString\n\tgetData: getDataByPath<TForm> & getDataByString\n\tunsetData: unsetDataByPath<TForm> & unsetDataByString\n\ttransform: (callback: (data: TForm) => TForm) => void\n\tonChange: (callback: OnChangeCallback) => void\n\tsetDefaults(): void\n\tsetDefaults(field: string, value: string): void\n\tsetDefaults(fields: TForm): void\n\treset: resetAll & resetByPath<TForm> & resetByString\n\tclearErrors: clearAllErrors & clearErrorsByPath<TForm> & clearErrorsByString\n\tsetError: setErrorByPath<TForm> & setErrorByString & setErrorByObject\n\tgetError: getErrorByPath<TForm> & getErrorByString\n\tsubmit: (method: Method, url: string, options?: VisitOptions) => void\n\tget: (url: string, options?: VisitOptions) => void\n\tpatch: (url: string, options?: VisitOptions) => void\n\tpost: (url: string, options?: VisitOptions) => void\n\tput: (url: string, options?: VisitOptions) => void\n\tdelete: (url: string, options?: VisitOptions) => void\n\tcancel: () => void\n}\nexport default function useInertiaForm<TForm>(initialValues?: TForm): UseInertiaFormProps<TForm>\nexport default function useInertiaForm<TForm>(\n\trememberKey: string,\n\tinitialValues?: TForm,\n): UseInertiaFormProps<TForm>\nexport default function useInertiaForm<TForm>(\n\trememberKeyOrInitialValues?: string|TForm,\n\tmaybeInitialValues?: TForm,\n): UseInertiaFormProps<TForm> {\n\t// Data\n\tconst getFormArguments = useCallback((): [string, TForm] => {\n\t\tlet rememberKey: string = null\n\t\tlet transformedData = rememberKeyOrInitialValues\n\t\tif(typeof rememberKeyOrInitialValues === 'string') {\n\t\t\trememberKey = rememberKeyOrInitialValues\n\t\t\ttransformedData = maybeInitialValues\n\t\t}\n\t\treturn [rememberKey, fillEmptyValues(transformedData as TForm)]\n\t}, [rememberKeyOrInitialValues, maybeInitialValues])\n\n\tconst [rememberKey, transformedData] = getFormArguments()\n\n\tconst [defaults, setDefaults] = useState(transformedData || {} as TForm)\n\tconst [data, setData] = rememberKey ? useRemember<TForm>(transformedData, `${rememberKey}:data`) : useState<TForm>(transformedData)\n\n\t// Detect root model name\n\tconst rootModelRef = useRef<string>()\n\tuseEffect(() => {\n\t\tconst keys = data ? Object.keys(data) : []\n\t\tif(keys.length === 1) {\n\t\t\trootModelRef.current = keys[0]\n\t\t}\n\t}, [])\n\n\t// Errors\n\tconst [errors, setErrors] = rememberKey\n\t\t? useRemember({} as Partial<Record<keyof TForm, string>>, `${rememberKey}:errors`)\n\t\t: useState({} as Partial<Record<keyof TForm, string>>)\n\tconst [hasErrors, setHasErrors] = useState(false)\n\n\t// Use to prepend root model name to errors returned by the server\n\tconst rewriteErrorKeys = (errors: Partial<Record<keyof TForm, string>>) => {\n\t\tif(!errors || !rootModelRef.current) return errors\n\n\t\tconst newErrors = {}\n\t\tObject.keys(errors).forEach(key => {\n\t\t\tnewErrors[`${rootModelRef.current}.${key}`] = errors[key]\n\t\t})\n\t\treturn newErrors\n\t}\n\n\t// Submit request processes\n\tconst [processing, setProcessing] = useState(false)\n\tconst [progress, setProgress] = useState<Progress>()\n\tconst [wasSuccessful, setWasSuccessful] = useState(false)\n\tconst [recentlySuccessful, setRecentlySuccessful] = useState(false)\n\tconst cancelToken = useRef<any>(null)\n\tconst recentlySuccessfulTimeoutId = useRef<NodeJS.Timeout>()\n\n\tlet transformRef = useRef((data: TForm) => data)\n\tconst isMounted = useRef<boolean>()\n\n\tuseEffect(() => {\n\t\tisMounted.current = true\n\t\treturn () => {\n\t\t\tisMounted.current = false\n\t\t}\n\t}, [])\n\n\t// OnChange function processes\n\tlet onChangeRef = useRef<OnChangeCallback>()\n\tlet onChangeArgsRef = useRef<Parameters<OnChangeCallback>>()\n\n\tuseEffect(() => {\n\t\tif(onChangeRef.current && onChangeArgsRef.current) {\n\t\t\tonChangeRef.current(...onChangeArgsRef.current)\n\t\t}\n\t}, [data])\n\n\t// Check if this was called in the context of a Form component and store `railsAttributes`\n\tlet railsAttributes = false\n\ttry {\n\t\tconst meta = useFormMeta()\n\t\trailsAttributes = meta.railsAttributes\n\t} catch(e) {}\n\n\tconst submit = useCallback(\n\t\t(method: Method, url: string, options: VisitOptions = {}) => {\n\t\t\tconst _options = {\n\t\t\t\t...options,\n\t\t\t\tonCancelToken: (token) => {\n\t\t\t\t\tcancelToken.current = token\n\n\t\t\t\t\tif(options.onCancelToken) {\n\t\t\t\t\t\treturn options.onCancelToken(token)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tonBefore: (visit) => {\n\t\t\t\t\tsetWasSuccessful(false)\n\t\t\t\t\tsetRecentlySuccessful(false)\n\t\t\t\t\tclearTimeout(recentlySuccessfulTimeoutId.current)\n\n\t\t\t\t\tif(options.onBefore) {\n\t\t\t\t\t\treturn options.onBefore(visit)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tonStart: (visit) => {\n\t\t\t\t\tsetProcessing(true)\n\n\t\t\t\t\tif(options.onStart) {\n\t\t\t\t\t\treturn options.onStart(visit)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tonProgress: (event) => {\n\t\t\t\t\tsetProgress(event)\n\n\t\t\t\t\tif(options.onProgress) {\n\t\t\t\t\t\treturn options.onProgress(event)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tonSuccess: (page) => {\n\t\t\t\t\tif(isMounted.current) {\n\t\t\t\t\t\tsetProcessing(false)\n\t\t\t\t\t\tsetProgress(null)\n\t\t\t\t\t\tsetErrors({})\n\t\t\t\t\t\tsetHasErrors(false)\n\t\t\t\t\t\tsetWasSuccessful(true)\n\t\t\t\t\t\tsetRecentlySuccessful(true)\n\t\t\t\t\t\trecentlySuccessfulTimeoutId.current = setTimeout(() => {\n\t\t\t\t\t\t\tif(isMounted.current) {\n\t\t\t\t\t\t\t\tsetRecentlySuccessful(false)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 2000)\n\t\t\t\t\t}\n\n\t\t\t\t\tif(options.onSuccess) {\n\t\t\t\t\t\treturn options.onSuccess(page)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tonError: (errors) => {\n\t\t\t\t\tif(isMounted.current) {\n\t\t\t\t\t\tsetProcessing(false)\n\t\t\t\t\t\tsetProgress(null)\n\t\t\t\t\t\tsetErrors(rewriteErrorKeys(errors))\n\t\t\t\t\t\tsetHasErrors(true)\n\t\t\t\t\t}\n\n\t\t\t\t\tif(options.onError) {\n\t\t\t\t\t\treturn options.onError(errors)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tonCancel: () => {\n\t\t\t\t\tif(isMounted.current) {\n\t\t\t\t\t\tsetProcessing(false)\n\t\t\t\t\t\tsetProgress(null)\n\t\t\t\t\t}\n\n\t\t\t\t\tif(options.onCancel) {\n\t\t\t\t\t\treturn options.onCancel()\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tonFinish: (visit) => {\n\t\t\t\t\tif(isMounted.current) {\n\t\t\t\t\t\tsetProcessing(false)\n\t\t\t\t\t\tsetProgress(null)\n\t\t\t\t\t}\n\n\t\t\t\t\tcancelToken.current = null\n\n\t\t\t\t\tif(options.onFinish) {\n\t\t\t\t\t\treturn options.onFinish(visit)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t}\n\n\t\t\tlet transformedData = transformRef.current(structuredClone(data))\n\t\t\tif(railsAttributes) {\n\t\t\t\ttransformedData = renameObjectWithAttributes(transformedData)\n\t\t\t}\n\n\t\t\tif(method === 'delete') {\n\t\t\t\trouter.delete(url, { ..._options, data: transformedData as RequestPayload })\n\t\t\t} else {\n\t\t\t\trouter[method](url, transformedData as RequestPayload, _options)\n\t\t\t}\n\t\t},\n\t\t[data, setErrors],\n\t)\n\n\tconst clearErrors = useCallback((fields?: string|string[]|Path<TForm>|Path<TForm>[]) => {\n\t\tif(!fields) {\n\t\t\tsetErrors({})\n\t\t\treturn\n\t\t}\n\n\t\tconst arrFields = coerceArray(fields)\n\n\t\tsetErrors((errors) => {\n\t\t\tconst newErrors = (Object.keys(errors) as Array<keyof TForm>).reduce(\n\t\t\t\t(carry, field) => ({\n\t\t\t\t\t...carry,\n\t\t\t\t\t...(arrFields.length > 0 && !arrFields.includes(String(field)) ? { [field]: errors[field] } : {}),\n\t\t\t\t}),\n\t\t\t\t{},\n\t\t\t)\n\t\t\tsetHasErrors(Object.keys(newErrors).length > 0)\n\t\t\treturn newErrors\n\t\t})\n\t}, [errors])\n\n\treturn {\n\t\tdata,\n\t\tisDirty: !isEqual(data, defaults),\n\t\terrors,\n\t\thasErrors,\n\t\tprocessing,\n\t\tprogress,\n\t\twasSuccessful,\n\t\trecentlySuccessful,\n\n\t\ttransform: useCallback((callback) => {\n\t\t\ttransformRef.current = callback\n\t\t}, []),\n\n\t\tonChange: (callback) => {\n\t\t\tonChangeRef.current = callback\n\t\t},\n\n\t\tsetData: (keyOrData: string|TForm|((previousData: TForm) => TForm), maybeValue?: any) => {\n\t\t\tif(typeof keyOrData === 'string') {\n\t\t\t\treturn setData(data => {\n\t\t\t\t\tconst clone = structuredClone(data)\n\t\t\t\t\tif(onChangeRef.current) {\n\t\t\t\t\t\tonChangeArgsRef.current = [keyOrData, maybeValue, get(data, keyOrData)]\n\t\t\t\t\t}\n\n\t\t\t\t\tset(clone as NestedObject, keyOrData, maybeValue)\n\t\t\t\t\treturn clone\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tif(keyOrData instanceof Function) {\n\t\t\t\tsetData((data) => {\n\t\t\t\t\tconst clone = keyOrData(structuredClone(data))\n\t\t\t\t\tif(onChangeRef.current) {\n\t\t\t\t\t\tonChangeArgsRef.current = [undefined, clone, data]\n\t\t\t\t\t}\n\t\t\t\t\treturn clone\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif(onChangeRef.current) {\n\t\t\t\tonChangeArgsRef.current = [undefined, data, keyOrData]\n\t\t\t}\n\n\t\t\tsetData(keyOrData)\n\t\t},\n\n\t\tgetData: (key: string): any => {\n\t\t\treturn get(data, key)\n\t\t},\n\n\t\tunsetData: useCallback((key: string) => {\n\t\t\tsetData(data => {\n\t\t\t\tconst clone = structuredClone(data)\n\t\t\t\tif(onChangeRef.current) {\n\t\t\t\t\tonChangeArgsRef.current = [key, get(data, key), undefined]\n\t\t\t\t}\n\t\t\t\tunsetCompact(clone as NestedObject, key)\n\t\t\t\treturn clone\n\t\t\t})\n\t\t}, [data]),\n\n\t\tsetDefaults: useCallback((fieldOrFields?: string|TForm, maybeValue?: string) => {\n\t\t\tif(fieldOrFields === undefined) {\n\t\t\t\tsetDefaults(() => data)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tsetDefaults((defaults) => ({\n\t\t\t\t...defaults,\n\t\t\t\t...(typeof fieldOrFields === 'string' ? { [fieldOrFields]: maybeValue } : (fieldOrFields as TForm)),\n\t\t\t}))\n\t\t}, [data]),\n\n\t\treset: useCallback((fields?: string|string[]) => {\n\t\t\tif(!fields) {\n\t\t\t\tif(onChangeRef.current) {\n\t\t\t\t\tonChangeArgsRef.current = [undefined, defaults, data]\n\t\t\t\t}\n\t\t\t\tsetData(defaults)\n\t\t\t\tsetErrors({})\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst arrFields = coerceArray(fields)\n\n\t\t\tconst clone = structuredClone(data)\n\t\t\tarrFields.forEach(field => {\n\t\t\t\tset(clone as NestedObject, field, get(defaults, field))\n\t\t\t})\n\t\t\tclearErrors(fields)\n\t\t\tif(onChangeRef.current) {\n\t\t\t\tonChangeArgsRef.current = [undefined, clone, data]\n\t\t\t}\n\t\t\tsetData(clone)\n\t\t}, [defaults, data]),\n\n\t\tsetError: useCallback((fieldOrFields: string|Record<string, string|string[]>, maybeValue?: string) => {\n\t\t\tsetErrors((errors) => {\n\t\t\t\tconst newErrors = {\n\t\t\t\t\t...errors,\n\t\t\t\t\t...(typeof fieldOrFields === 'string'\n\t\t\t\t\t\t? { [fieldOrFields]: maybeValue }\n\t\t\t\t\t\t: (fieldOrFields as Record<keyof TForm, string>)),\n\t\t\t\t}\n\t\t\t\tsetHasErrors(Object.keys(newErrors).length > 0)\n\t\t\t\treturn newErrors\n\t\t\t})\n\t\t}, [errors]),\n\n\t\tgetError: useCallback((key: string): string|string[] => {\n\t\t\treturn get(errors, key)\n\t\t}, [errors]),\n\n\t\tclearErrors,\n\n\t\tsubmit,\n\n\t\tget: useCallback((url, options) => {\n\t\t\tsubmit('get', url, options)\n\t\t}, []),\n\n\t\tpost: useCallback((url, options) => {\n\t\t\tsubmit('post', url, options)\n\t\t}, []),\n\n\t\tput: useCallback((url, options) => {\n\t\t\tsubmit('put', url, options)\n\t\t}, []),\n\n\t\tpatch: useCallback((url, options) => {\n\t\t\tsubmit('patch', url, options)\n\t\t}, []),\n\n\t\tdelete: useCallback((url, options) => {\n\t\t\tsubmit('delete', url, options)\n\t\t}, []),\n\n\t\tcancel: useCallback(() => {\n\t\t\tif(cancelToken.current) {\n\t\t\t\tcancelToken.current.cancel()\n\t\t\t}\n\t\t}, [cancelToken.current]),\n\t}\n}\n","import React from 'react'\nimport { type UseInertiaFormProps } from '../useInertiaForm'\nimport { type AxiosResponse } from 'axios'\nimport { NestedObject } from '../useInertiaForm'\n\nexport type HTTPVerb = 'post' | 'put' | 'get' | 'patch' | 'delete'\n\nexport interface UseFormProps<TForm = NestedObject> extends UseInertiaFormProps<TForm> {\n\tmodel?: string\n\tmethod: HTTPVerb\n\tto?: string\n\tsubmit: () => Promise<AxiosResponse<any> | UseInertiaFormProps<TForm> | void>\n}\n\nexport const createContext = <CT extends unknown | null>() => {\n\tconst context = React.createContext<CT | undefined>(null)\n\n\tconst useContext = <T extends CT = CT>() => {\n\t\tconst c = React.useContext<UseFormProps<T>>(\n\t\t\t(context as unknown) as React.Context<UseFormProps<T>>,\n\t\t)\n\t\tif(c === null) {\n\t\t\tthrow new Error('useContext must be inside a Provider with a value')\n\t\t}\n\t\treturn c\n\t}\n\n\treturn [useContext, context.Provider] as const\n}\n\nconst [useForm, FormProvider] = createContext()\nexport { FormProvider, useForm }\n","import React, { useCallback, useEffect } from 'react'\nimport axios from 'axios'\nimport { type VisitOptions } from '@inertiajs/core'\nimport useInertiaForm, { NestedObject } from '../useInertiaForm'\nimport { useForm, type UseFormProps, type HTTPVerb, FormProvider } from './FormProvider'\nimport FormMetaWrapper, { useFormMeta, type FormMetaValue } from './FormMetaWrapper'\nimport { unset } from 'lodash'\n\ntype PartialHTMLForm = Omit<React.FormHTMLAttributes<HTMLFormElement>, 'onChange'|'onSubmit'|'onError'>\n\nexport interface FormProps<TForm> extends PartialHTMLForm {\n\tdata: TForm\n\tmodel?: string\n\tmethod?: HTTPVerb\n\tto: string\n\tasync?: boolean\n\tresetAfterSubmit?: boolean\n\tremember?: boolean\n\trailsAttributes?: boolean\n\tfilter?: string[]\n\tonSubmit?: (form: UseFormProps<TForm>) => boolean|void\n\tonChange?: (form: UseFormProps<TForm>) => void\n\tonSuccess?: (form: UseFormProps<TForm>) => void\n\tonError?: (form: UseFormProps<TForm>) => void\n}\n\nconst Form = <TForm extends NestedObject>({\n\tchildren,\n\tmodel,\n\tdata,\n\tmethod = 'post',\n\tto,\n\tasync = false,\n\tresetAfterSubmit,\n\tremember = true,\n\tfilter,\n\tonSubmit,\n\tonChange,\n\tonSuccess,\n\tonError,\n\t...props\n}: Omit<FormProps<TForm>, 'railsAttributes'>) => {\n\tconst filteredData = useCallback((data: TForm) => {\n\t\tif(!filter) return data\n\n\t\tconst clone = structuredClone(data)\n\t\tfilter.forEach(path => {\n\t\t\tunset(clone, path)\n\t\t})\n\t\treturn clone\n\t}, [data, filter])\n\n\tconst form = remember ?\n\t\tuseInertiaForm<TForm>(`${method}/${model || to}`, filteredData(data))\n\t\t:\n\t\tuseInertiaForm<TForm>(filteredData(data))\n\n\tconst contextValueObject = useCallback((): UseFormProps<TForm> => (\n\t\t{ ...form, model, method, to, submit }\n\t), [data, form.data, form.errors])\n\n\t/**\n\t * Submits the form. If async prop is true, submits using axios,\n\t * otherwise submits using Inertia's `useForm.submit` method\n\t */\n\tconst submit = async (options?: Partial<VisitOptions>) => {\n\t\tlet shouldSubmit = to && onSubmit && onSubmit(contextValueObject()) === false ? false : true\n\n\t\tif(shouldSubmit) {\n\t\t\tif(async) {\n\t\t\t\treturn axios[method](to, form.data)\n\t\t\t} else {\n\t\t\t\treturn form.submit(method, to, options)\n\t\t\t}\n\t\t}\n\t}\n\n\tconst handleSubmit = (e: React.FormEvent) => {\n\t\te.preventDefault()\n\t\te.stopPropagation()\n\n\t\tsubmit({\n\t\t\tonSuccess: () => {\n\t\t\t\tif(resetAfterSubmit || (resetAfterSubmit !== false && async === true)) {\n\t\t\t\t\tform.reset()\n\t\t\t\t}\n\t\t\t\tif(onSuccess) onSuccess(contextValueObject())\n\t\t\t},\n\t\t})\n\t}\n\n\t// Set values from url search params. Allows for prefilling form data from a link\n\tuseEffect(() => {\n\t\tconst url = new URL(window.location.href)\n\t\turl.searchParams.forEach((value, key) => {\n\t\t\tform.setData(key, value)\n\t\t})\n\t}, [])\n\n\t// Callbacks\n\tuseEffect(() => {\n\t\tif(onChange) onChange(contextValueObject())\n\t}, [form.data])\n\n\tuseEffect(() => {\n\t\tif(onError) onError(contextValueObject())\n\t}, [form.errors])\n\n\treturn (\n\t\t<FormProvider value={ contextValueObject() }>\n\t\t\t<form onSubmit={ handleSubmit } { ...props }>\n\t\t\t\t{ children }\n\t\t\t</form>\n\t\t</FormProvider>\n\t)\n}\n\nconst WrappedForm = <TForm extends Partial<NestedObject>>(\n\t{ children, model, railsAttributes = false, ...props }: FormProps<TForm>,\n) => {\n\treturn (\n\t\t<FormMetaWrapper model={ model } railsAttributes={ railsAttributes }>\n\t\t\t<Form<TForm> model={ model } { ...props }>\n\t\t\t\t{ children }\n\t\t\t</Form>\n\t\t</FormMetaWrapper>\n\t)\n}\n\nexport {\n\tWrappedForm as Form,\n\tuseForm,\n\tuseFormMeta,\n\ttype HTTPVerb,\n\ttype UseFormProps,\n\ttype FormMetaValue,\n}\n","import React, { useEffect } from 'react'\nimport { createContext } from './utils'\nimport { useFormMeta } from './Form/'\n\nexport interface NestedFieldsProps {\n\tchildren: React.ReactNode | React.ReactElement[]\n\tmodel: string\n}\n\nconst [useNestedAttribute, NestedAttributeProvider] = createContext<string>()\nexport { useNestedAttribute }\n\nconst NestedFields = ({ children, model }: NestedFieldsProps) => {\n\tlet inputModel = model\n\n\ttry {\n\t\tconst nested = useNestedAttribute()\n\n\t\tif(model.charAt(0) === '[') {\n\t\t\tinputModel = `${nested}${model}`\n\t\t} else {\n\t\t\tinputModel = `${nested}.${model}`\n\t\t}\n\t} catch(e) {}\n\n\tconst { addAttribute } = useFormMeta()\n\n\tuseEffect(() => {\n\t\taddAttribute(model)\n\t}, [])\n\n\treturn (\n\t\t<NestedAttributeProvider value={ inputModel }>\n\t\t\t{ Array.isArray(children) ? children.map((child, i) => React.cloneElement(child, { key: i })) : children }\n\t\t</NestedAttributeProvider>\n\t)\n}\n\nexport default NestedFields\n","export type InputStrategy = (name: string, model?: string) => {\n\tinputId: string\n\tinputName: string\n}\n\n/**\n * Standard input strategy:\n *  name: dot notation with array awareness\n *  model: snake case based on nested models and input name\n */\nconst inputStrategy: InputStrategy = (name, model) => {\n\tif(!model) {\n\t\treturn {\n\t\t\tinputId: name,\n\t\t\tinputName: name,\n\t\t}\n\t}\n\n\tlet inputName: string\n\n\tif(name.charAt(0) === '[') {\n\t\tinputName = `${model}${name}`\n\t} else {\n\t\tinputName = `${model}.${name}`\n\t}\n\n\treturn {\n\t\tinputId: `${model}_${name}`.replace('.', '_').replace(/\\[(\\d)\\]/, '_$1'),\n\t\tinputName: inputName,\n\t}\n}\n\nexport default inputStrategy\n","import { useForm } from '../Form'\nimport { useNestedAttribute } from '../NestedFields'\nimport inputStrategy, { type InputStrategy } from './inputStrategy'\n\ninterface UseInertiaInputProps {\n\tname: string\n\tmodel?: string\n\terrorKey?: string\n\tstrategy?: InputStrategy\n}\n\n/**\n * Returns form data and input specific methods to use with an input.\n */\nconst useInertiaInput = <T = number|string>({ name, model, errorKey, strategy = inputStrategy }: UseInertiaInputProps) => {\n\tconst form = useForm()\n\n\tlet usedModel = model ?? form.model\n\n\ttry {\n\t\tconst nested = useNestedAttribute()\n\t\tusedModel += `.${nested}`\n\t} catch(e) {}\n\n\tconst { inputName, inputId } = strategy(name, usedModel)\n\n\treturn {\n\t\tform,\n\t\tinputName: inputName,\n\t\tinputId,\n\t\tvalue: form.getData(inputName) as T,\n\t\tsetValue: (value: T) => {\n\t\t\treturn form.setData(inputName, value)\n\t\t},\n\t\terror: form.getError(errorKey ?? inputName),\n\t}\n}\n\nexport default useInertiaInput\n","import { useCallback } from 'react'\nimport { useForm, useFormMeta } from './Form'\nimport { get, set } from 'lodash'\nimport { useNestedAttribute } from './NestedFields'\nimport { NestedObject } from './useInertiaForm'\n\nexport interface DynamicInputsProps {\n\tmodel?: string\n\temptyData: Record<string, unknown>\n}\n\ntype DynamicInputsReturn = {\n\taddInput: () => void\n\tremoveInput: (i: number) => void\n\tpaths: string[]\n}\n\nconst useDynamicInputs = ({ model, emptyData }: DynamicInputsProps): DynamicInputsReturn => {\n\tconst { setData, unsetData, getData } = useForm()\n\tconst { model: formModel } = useFormMeta()\n\tlet inputModel = formModel ?? ''\n\n\ttry {\n\t\tconst nestedModel = useNestedAttribute()\n\t\tinputModel = formModel ? `${inputModel}.${nestedModel}` : nestedModel\n\t} catch(e) {}\n\n\tinputModel = `${inputModel}.${model || ''}`\n\n\tconst handleAddInputs = useCallback(() => {\n\t\tsetData((formData: NestedObject) => {\n\t\t\tconst clone = structuredClone(formData)\n\t\t\tlet node: unknown[] = get(clone, inputModel) as unknown[]\n\n\t\t\tif(!node || !Array.isArray(node)) {\n\t\t\t\tset(clone, inputModel, [])\n\t\t\t\tnode = get(clone, inputModel) as unknown[]\n\t\t\t}\n\n\t\t\tnode.push(emptyData)\n\t\t\tset(clone, inputModel, node)\n\n\t\t\treturn clone\n\t\t})\n\t}, [])\n\n\tconst handleRemoveInputs = useCallback((i: number) => {\n\t\tconst data = getData(inputModel)\n\t\tif(data[i] && data[i].id) {\n\t\t\t// If the input has an existing record, set a `_destroy: true` flag\n\t\t\tsetData(`${inputModel}[${i}]._destroy`, true)\n\t\t} else {\n\t\t\t// If the input doesn't have an existing record, remove it from the array\n\t\t\tunsetData(`${inputModel}[${i}]`)\n\t\t}\n\t}, [])\n\n\tconst data = getData(inputModel)\n\n\tconst generatePaths = useCallback(() => {\n\t\tif(!Array.isArray(data)) return []\n\n\t\treturn data.map((_,i) => `${model || ''}[${i}]`)\n\t}, [data])\n\n\treturn {\n\t\taddInput: handleAddInputs,\n\t\tremoveInput: handleRemoveInputs,\n\t\tpaths: generatePaths(),\n\t}\n}\n\nexport default useDynamicInputs\n","import React from 'react'\nimport NestedFields from '../NestedFields'\nimport useDynamicInputs from '../useDynamicInputs'\n\nexport interface DynamicInputsProps {\n\tchildren: React.ReactNode\n\tmodel?: string\n\temptyData: Record<string, unknown>\n\taddInputButton?: JSX.Element\n\tremoveInputButton?: JSX.Element\n}\n\nconst DynamicInputs = ({\n\tchildren,\n\tmodel,\n\temptyData,\n\taddInputButton = <button>+</button>,\n\tremoveInputButton = <button>-</button>,\n}: DynamicInputsProps) => {\n\tconst { addInput, removeInput, paths } = useDynamicInputs({ model, emptyData })\n\n\treturn (\n\t\t<>\n\t\t\t{ React.cloneElement(addInputButton, { onClick: addInput, type: 'button' }) }\n\t\t\t{ paths.map((path, i) => (\n\t\t\t\t<NestedFields key={ i } model={ path }>\n\t\t\t\t\t<div>{ children }</div>\n\t\t\t\t\t{ React.cloneElement(removeInputButton, { onClick: () => removeInput(i), type: 'button' }) }\n\t\t\t\t</NestedFields>\n\t\t\t)) }\n\t\t</>\n\t)\n}\n\nexport default DynamicInputs\n\n","import React from 'react'\nimport useInertiaInput from '../useInertiaInput'\n\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n\tname: string\n\tmodel?: string\n\tcomponent?: React.ElementType\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>((\n\t{ name, component = 'input', model, ...props },\n\tref,\n) => {\n\tconst { inputName, inputId, value, setValue } = useInertiaInput({ name, model })\n\n\tconst Element = component\n\n\treturn (\n\t\t<Element\n\t\t\tname={ inputName }\n\t\t\tid={ inputId }\n\t\t\tvalue={ value }\n\t\t\tonChange={ (e: React.ChangeEvent<HTMLInputElement>) => setValue(e.target.value) }\n\t\t\tref={ ref }\n\t\t\t{ ...props }\n\t\t/>\n\t)\n})\n\nexport default Input\n","import React, { useCallback } from 'react'\nimport { useForm } from '../Form'\nimport { isUnset } from '../utils'\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n\tcomponent?: string | React.ComponentType\n\trequiredFields?: string[]\n}\n\nconst Submit = React.forwardRef<HTMLButtonElement, ButtonProps>((\n\t{ children, type = 'submit', disabled = false, component:Component = 'button', requiredFields, ...props },\n\tref,\n) => {\n\tconst { data, getData, processing } = useForm()\n\n\tconst hasEmptyRequiredFields = useCallback(() => {\n\t\tif(!requiredFields || requiredFields.length === 0) return false\n\n\t\treturn requiredFields.some((field) => isUnset(getData(field)))\n\t}, [data])\n\n\treturn (\n\t\t<Component { ...{\n\t\t\tchildren,\n\t\t\ttype,\n\t\t\tdisabled: disabled || processing || (requiredFields && hasEmptyRequiredFields()),\n\t\t\tref,\n\t\t\t...props,\n\t\t} } />\n\t)\n})\n\nexport default React.memo(Submit)\n"],"names":["createContext","context","React","c","useContext","Error","Provider","fillEmptyValues","data","clone","structuredClone","key","isPlainObject","Array","isArray","map","el","undefined","recursiveAppendString","str","Object","entries","forEach","value","renameKey","obj","oldKey","newKey","coerceArray","arg","useFormMeta","FormMetaProvider","attributesReducer","state","attribute","newState","Set","add","FormMetaWrapper","children","model","railsAttributes","nestedAttributes","addAttribute","useReducer","metaValues","createElement","useInertiaForm","rememberKeyOrInitialValues","maybeInitialValues","getFormArguments","useCallback","rememberKey","transformedData","defaults","setDefaults","useState","setData","useRemember","rootModelRef","useRef","useEffect","keys","length","current","errors","setErrors","hasErrors","setHasErrors","processing","setProcessing","progress","setProgress","wasSuccessful","setWasSuccessful","recentlySuccessful","setRecentlySuccessful","cancelToken","recentlySuccessfulTimeoutId","transformRef","isMounted","onChangeRef","onChangeArgsRef","meta","e","submit","method","url","options","_options","onCancelToken","token","onBefore","visit","clearTimeout","onStart","onProgress","event","onSuccess","page","setTimeout","onError","newErrors","rewriteErrorKeys","onCancel","onFinish","values","renameObjectWithAttributes","router","delete","clearErrors","fields","arrFields","reduce","carry","field","includes","String","isDirty","isEqual","transform","callback","onChange","keyOrData","maybeValue","get","set","Function","getData","unsetData","path","unset","position","indexOf","arrPath","slice","arr","filter","a","unsetCompact","fieldOrFields","reset","setError","getError","post","put","patch","cancel","useForm","FormProvider","Form","to","async","resetAfterSubmit","remember","onSubmit","props","filteredData","form","contextValueObject","axios","URL","window","location","href","searchParams","preventDefault","stopPropagation","WrappedForm","useNestedAttribute","NestedAttributeProvider","NestedFields","inputModel","nested","charAt","child","i","cloneElement","inputStrategy","name","inputId","inputName","replace","useInertiaInput","errorKey","strategy","usedModel","setValue","error","useDynamicInputs","emptyData","formModel","nestedModel","handleAddInputs","formData","node","push","handleRemoveInputs","id","addInput","removeInput","paths","_","generatePaths","DynamicInputs","addInputButton","removeInputButton","Fragment","onClick","type","Input","forwardRef","component","ref","Element","target","Submit","disabled","Component","requiredFields","hasEmptyRequiredFields","some","isUnset","v","Boolean","isEmpty","Submit$1","memo"],"mappings":"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"}